<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>User interaction</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="681eeccc-6228-4744-991b-8ffc9bb71c40" /><meta name="Description" content="The Route Calculation sample shows how routing can be implemented with the help of PTV xServer .NET. It is explained how user interaction is implemented within the Elementary routing use case." /><meta name="Microsoft.Help.ContentType" content="Samples" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">PTV xServer .NET<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html\9e985ce7-8d43-434f-82bb-260b742553c1.htm" title="PTV xServer .NET" tocid="roottoc">PTV xServer .NET</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/a5bc5d46-5eb8-4b50-be53-1ffa3f7bc7f4.htm" title="How To ..." tocid="a5bc5d46-5eb8-4b50-be53-1ffa3f7bc7f4">How To ...</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/e7c12cc4-3819-470e-867a-b521bee43cf0.htm" title="Elementary Routing" tocid="e7c12cc4-3819-470e-867a-b521bee43cf0">Elementary Routing</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/39329e01-081c-4bf2-a7fc-e6d37bfe36e2.htm" title="Calling the xRoute API" tocid="39329e01-081c-4bf2-a7fc-e6d37bfe36e2">Calling the xRoute API</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/369117cc-72ae-4c60-922b-8669d2ad7e2b.htm" title="Displaying the xRoute result" tocid="369117cc-72ae-4c60-922b-8669d2ad7e2b">Displaying the xRoute result</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/681eeccc-6228-4744-991b-8ffc9bb71c40.htm" title="User interaction" tocid="681eeccc-6228-4744-991b-8ffc9bb71c40">User interaction</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>User interaction</h1></td></tr></table><span class="introStyle"></span> <div class="introduction"><p>
        The Route Calculation sample shows how routing can be implemented with the help of PTV xServer .NET.
        It is explained how user interaction is implemented within the <span class="term">Elementary routing</span> use case.
      </p><p>This page contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#DeterminingMapClickPoint">Determining the Map click point</a></li><li class="outlineSectionEntry"><a href="#AddingContextMenuRouteManipulation">Adding a context menu for route manipulation and calculation</a></li><li class="outlineSectionEntry"><a href="#AddingContextMenuWayPoint">Adding a context menu for way point manipulation</a></li><li class="outlineSectionEntry"><a href="#seeAlsoSection">See Also</a></li></ul></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Requirements</span></div><div id="ID0RBSection" class="collapsibleSection"><p>
          It is assumed that the <span class="term">Elementary routing</span> has been already used or at least that the 'Use case manual' on 
          <a href="e7c12cc4-3819-470e-867a-b521bee43cf0.htm">this page</a> is read.
        </p></div><div class="collapsibleAreaRegion" id="DeterminingMapClickPoint"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Determining the Map click point</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
          Before looking at the way point visualization it is important to understand how to determine the users click point on the map.
          To do that, a <a href="http://msdn2.microsoft.com/en-us/library/ms611355" target="_blank">MouseButtonEventHandler</a> is registered on the 
          <a href="http://msdn2.microsoft.com/en-us/library/ms596683" target="_blank">MouseRightButtonDown</a> of the map.
          Then when the handler gets fired the map can be asked where the click occurred. Please notice that the screen
          coordinates have to be converted into the interested coordinate format. Here 'PTVMERCATOR' coordinates are needed, so 'EPSG:505456' as esrid
          is provided. All that is left to do now is to store the coordinate format in a member ('clickPoint') and use it later on when needed.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EABADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EABADAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EABADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EABADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">_wpfMap.MouseRightButtonDown += wpfMap_MapMouseRightButtonDown;
ContextMenuService.SetContextMenu(_wpfMap, cm);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EABADAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAADAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> wpfMap_MapMouseRightButtonDown(<span class="highlight-keyword">object</span> sender, MouseButtonEventArgs e)
{
    System.Windows.Point p = _wpfMap.MouseToGeo(e, <span class="highlight-literal">"PTV_MERCATOR"</span>);
    clickPoint = <span class="highlight-keyword">new</span> PlainPoint { x = p.X, y = p.Y };

    e.Handled = <span class="highlight-keyword">false</span>;
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAADAAA");</script></div><div class="collapsibleAreaRegion" id="AddingContextMenuRouteManipulation"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Adding a context menu for route manipulation and calculation</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
          For calculating and manipulating the route a context menu to the map is added which is opened when the user performs a right click on the map.
          The context menu is implemented in the 'RoutingControl.xaml' file and bound to the right click event on the map.
          The result is that if the user performs a right click anywhere in the map the route context menu appears. 
          The context menu is disabled during an active route calculation by removing it temporarily from the map and adding it later 
          on again when the route calculation has finished.
        </p><p>
          The route context menu holds entries for setting the start, intermediate and destination way points. Further it holds controls 
          for triggering a route calculation or resetting the current route. So what is left to do is to implement corresponding event handlers.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">/// &lt;summary&gt; Event handler for a click on the set start menu entry. &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;param name="sender"&gt; The sender of the Click event. &lt;/param&gt;</span>
<span class="highlight-comment">/// &lt;param name="e"&gt; The event parameters. &lt;/param&gt;</span>
<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> SetStart_Click(<span class="highlight-keyword">object</span> sender, RoutedEventArgs e)
{
    wayPoints.Insert(<span class="highlight-number">0</span>, clickPoint);
    RefreshRouteUIElements();
}

<span class="highlight-comment">/// &lt;summary&gt; Event handler for a click on the set end menu entry. &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;param name="sender"&gt; The sender of the Click event. &lt;/param&gt;</span>
<span class="highlight-comment">/// &lt;param name="e"&gt; The event parameters. &lt;/param&gt;</span>
<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> SetEnd_Click(<span class="highlight-keyword">object</span> sender, RoutedEventArgs e)
{
    wayPoints.Add(clickPoint);
    RefreshRouteUIElements();
}

<span class="highlight-comment">/// &lt;summary&gt; Event handler for a click on the calculate route menu entry. &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;param name="sender"&gt; The sender of the Click event. &lt;/param&gt;</span>
<span class="highlight-comment">/// &lt;param name="e"&gt; The event parameters. &lt;/param&gt;</span>
<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> CalcRoute_Click(<span class="highlight-keyword">object</span> sender, RoutedEventArgs e)
{
    CalculateRoute();
}

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Handler for clearing the route.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;param name="sender"&gt; The sender of the Click event. &lt;/param&gt;</span>
<span class="highlight-comment">/// &lt;param name="e"&gt; The event parameters. &lt;/param&gt;</span>
<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> ClearRouteItem_Click(<span class="highlight-keyword">object</span> sender, RoutedEventArgs e)
{
    wayPoints.Clear();
    RefreshRouteUIElements();
    ClearRouteItem.IsEnabled = <span class="highlight-keyword">false</span>;
}

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Handler for adding a waypoint between start and end. The waypoint will be added directly</span>
<span class="highlight-comment">/// before the end waypoint.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;param name="sender"&gt; The sender of the Click event. &lt;/param&gt;</span>
<span class="highlight-comment">/// &lt;param name="e"&gt; The event parameters. &lt;/param&gt;</span>
<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> AddBetween_Click_1(<span class="highlight-keyword">object</span> sender, RoutedEventArgs e)
{
    wayPoints.Insert(wayPoints.Count - <span class="highlight-number">1</span>, clickPoint);
    RefreshRouteUIElements();
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAACAAA");</script></div><div class="collapsibleAreaRegion" id="AddingContextMenuWayPoint"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Adding a context menu for way point manipulation</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
          For manipulating a way point (remove or move up, down in the list) a context menu is added to the pin. This context menu is opened when the user performs a right click on the pin.
          Now a context menu is added to the pin. The entries of this context menu enable the user to alter the way point list. Please notice that the current way point is added to each 
          <a href="http://msdn2.microsoft.com/en-us/library/ms611603" target="_blank">MenuItem</a> as <a href="http://msdn2.microsoft.com/en-us/library/ms593085" target="_blank">CommandParameter</a>. 
          That way this <a href="http://msdn2.microsoft.com/en-us/library/ms593085" target="_blank">CommandParameter</a> can be used in the event handler methods to apply the 
          modification (add, remove or move in the list). Next event handlers have to be added for move up, down and for remove.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EABABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EABABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EABABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EABABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> cmWayPoints = <span class="highlight-keyword">new</span> ContextMenu();
<span class="highlight-keyword">var</span> item = <span class="highlight-keyword">new</span> MenuItem {Header = <span class="highlight-literal">"Remove"</span>, CommandParameter = wayPoint};
item.Click += RemoveItemClick;
cmWayPoints.Items.Add(item);
item = <span class="highlight-keyword">new</span> MenuItem {Header = <span class="highlight-literal">"Move up"</span>, CommandParameter = wayPoint};
item.Click += MoveUpItemClick;
cmWayPoints.Items.Add(item);
item = <span class="highlight-keyword">new</span> MenuItem {Header = <span class="highlight-literal">"Move down"</span>, CommandParameter = wayPoint};
item.Click += MoveDownItemClick;
cmWayPoints.Items.Add(item);
ContextMenuService.SetContextMenu(pin, cmWayPoints);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EABABAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">/// &lt;summary&gt; Event handler for a click on a way point. &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;param name="sender"&gt; The sender of the Click event. &lt;/param&gt;</span>
<span class="highlight-comment">/// &lt;param name="e"&gt; The event parameters. &lt;/param&gt;</span>
<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> RemoveItemClick(<span class="highlight-keyword">object</span> sender, RoutedEventArgs e)
{
    wayPoints.Remove((sender <span class="highlight-keyword">as</span> MenuItem)?.CommandParameter <span class="highlight-keyword">as</span> PlainPoint);
    RefreshRouteUIElements();
}

<span class="highlight-comment">/// &lt;summary&gt; Event handler for a click on a way point. &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;param name="sender"&gt; The sender of the Click event. &lt;/param&gt;</span>
<span class="highlight-comment">/// &lt;param name="e"&gt; The event parameters. &lt;/param&gt;</span>
<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> MoveUpItemClick(<span class="highlight-keyword">object</span> sender, RoutedEventArgs e)
{
    <span class="highlight-keyword">int</span> index = wayPoints.IndexOf((sender <span class="highlight-keyword">as</span> MenuItem)?.CommandParameter <span class="highlight-keyword">as</span> PlainPoint);
    <span class="highlight-keyword">if</span> (index &lt;= <span class="highlight-number">0</span>) <span class="highlight-keyword">return</span>;

    wayPoints.RemoveAt(index);
    wayPoints.Insert(index - <span class="highlight-number">1</span>, (sender <span class="highlight-keyword">as</span> MenuItem)?.CommandParameter <span class="highlight-keyword">as</span> PlainPoint);
    RefreshRouteUIElements();
}

<span class="highlight-comment">/// &lt;summary&gt; Event handler for a click on a way point. &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;param name="sender"&gt; The sender of the Click event. &lt;/param&gt;</span>
<span class="highlight-comment">/// &lt;param name="e"&gt; The event parameters. &lt;/param&gt;</span>
<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> MoveDownItemClick(<span class="highlight-keyword">object</span> sender, RoutedEventArgs e)
{
    <span class="highlight-keyword">int</span> index = wayPoints.IndexOf((sender <span class="highlight-keyword">as</span> MenuItem)?.CommandParameter <span class="highlight-keyword">as</span> PlainPoint);
    <span class="highlight-keyword">if</span> (index &gt;= wayPoints.Count - <span class="highlight-number">1</span>) <span class="highlight-keyword">return</span>;

    wayPoints.RemoveAt(index);
    wayPoints.Insert(index + <span class="highlight-number">1</span>, (sender <span class="highlight-keyword">as</span> MenuItem)?.CommandParameter <span class="highlight-keyword">as</span> PlainPoint);
    RefreshRouteUIElements();
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAABAAA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID5RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="http://msdn2.microsoft.com/en-us/library/ms611603" target="_blank">MenuItem</a></div><div class="seeAlsoStyle"><a href="http://msdn2.microsoft.com/en-us/library/ms593085" target="_blank">CommandParameter</a></div><div class="seeAlsoStyle"><a href="http://msdn2.microsoft.com/en-us/library/ms611355" target="_blank">MouseButtonEventHandler</a></div><h4 class="subHeading">Other Resources</h4><div class="seeAlsoStyle"><a href="39329e01-081c-4bf2-a7fc-e6d37bfe36e2.htm">Call the xRoute API.</a></div><div class="seeAlsoStyle"><a href="369117cc-72ae-4c60-922b-8669d2ad7e2b.htm">Display the route.</a></div></div></div></div><div id="pageFooter" class="pageFooter">Visit our website at <a href="http://www.ptvgroup.com">www.ptvgroup.com</a> or browse to <a href="http://xserver.ptvgroup.com">xserver.ptvgroup.com</a> for the latest information on our developer components.<p>Copyright (c) PTV Group, Karlsruhe, Germany.</p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:developer%40ptvgroup.com?Subject=PTV xServer .NET">developer@ptvgroup.com</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>