<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Add Different Shapes</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="101dba72-fb36-468b-aa99-4b9c5bbfb62f" /><meta name="Description" content="This page explains the Different Shapes use case which is provided with PTV xServer .NET. It shows how simple shapes can be displayed." /><meta name="Microsoft.Help.ContentType" content="Samples" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">PTV xServer .NET<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html\9e985ce7-8d43-434f-82bb-260b742553c1.htm" title="PTV xServer .NET" tocid="roottoc">PTV xServer .NET</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/a5bc5d46-5eb8-4b50-be53-1ffa3f7bc7f4.htm" title="How To ..." tocid="a5bc5d46-5eb8-4b50-be53-1ffa3f7bc7f4">How To ...</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/5ff21e55-6f37-451d-acae-9321ca31836d.htm" title="XServer Connection" tocid="5ff21e55-6f37-451d-acae-9321ca31836d">XServer Connection</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/714dc4ba-10d3-4a8d-a55d-6210630ff6eb.htm" title="Show Here Satellite View" tocid="714dc4ba-10d3-4a8d-a55d-6210630ff6eb">Show Here Satellite View</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/4926f311-8333-4b18-b509-70c1d876d5eb.htm" title="Show Clusters" tocid="4926f311-8333-4b18-b509-70c1d876d5eb">Show Clusters</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/101dba72-fb36-468b-aa99-4b9c5bbfb62f.htm" title="Add Different Shapes" tocid="101dba72-fb36-468b-aa99-4b9c5bbfb62f">Add Different Shapes</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/e9f559c7-394c-4858-8a40-4744d2fc7200.htm" title="Integrate an additional WPF map" tocid="e9f559c7-394c-4858-8a40-4744d2fc7200">Integrate an additional WPF map</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/6b437145-f3ed-4267-a3fc-e71737e6db65.htm" title="Add a GeoRSS Layer" tocid="6b437145-f3ed-4267-a3fc-e71737e6db65">Add a GeoRSS Layer</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/d705537f-f7fe-435c-bd80-d4d399ee4410.htm" title="Show Map&amp;Market Data" tocid="d705537f-f7fe-435c-bd80-d4d399ee4410">Show Map&amp;Market Data</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/427ab62e-f02d-4e92-9c26-31e0f89d49c5.htm" title="Show a Shape File Content" tocid="427ab62e-f02d-4e92-9c26-31e0f89d49c5">Show a Shape File Content</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/2f6d7ed1-b136-44dc-97c1-3f2c640c2134.htm" title="Add a WMS Layer" tocid="2f6d7ed1-b136-44dc-97c1-3f2c640c2134">Add a WMS Layer</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/fccd9937-aa04-4803-936d-7796cb966963.htm" title="Selection" tocid="fccd9937-aa04-4803-936d-7796cb966963">Selection</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/90fd0772-df3b-473b-a305-6ee939193c7f.htm" title="Apply a UI Theme" tocid="90fd0772-df3b-473b-a305-6ee939193c7f">Apply a UI Theme</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/fe48cb51-c6ce-487e-b4c0-168537c184c3.htm" title="Geocode an Address" tocid="fe48cb51-c6ce-487e-b4c0-168537c184c3">Geocode an Address</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/e7c12cc4-3819-470e-867a-b521bee43cf0.htm" title="Elementary Routing" tocid="e7c12cc4-3819-470e-867a-b521bee43cf0">Elementary Routing</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/e4c416a0-9573-4df8-b733-3bf72539ef0f.htm" title="Drag&amp;Drop Routing" tocid="e4c416a0-9573-4df8-b733-3bf72539ef0f">Drag&amp;Drop Routing</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/34f6b520-454f-4a6a-b0ae-00fc77da512b.htm" title="Tour Planning" tocid="34f6b520-454f-4a6a-b0ae-00fc77da512b">Tour Planning</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/eb8e522c-5ed2-4481-820f-bfd74ee2aeb8.htm" title="Use the Map Gadgets" tocid="eb8e522c-5ed2-4481-820f-bfd74ee2aeb8">Use the Map Gadgets</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/fdaa5363-b092-43cc-950e-6f120dee0d92.htm" title="Set the Map Location" tocid="fdaa5363-b092-43cc-950e-6f120dee0d92">Set the Map Location</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/b55f5d50-a421-4951-bc01-d5fb85c94f54.htm" title="Add an XMapServer Layer" tocid="b55f5d50-a421-4951-bc01-d5fb85c94f54">Add an XMapServer Layer</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/91617b6b-1086-4c05-a1ce-4c64f8bc7dcd.htm" title="Add a Custom Layer" tocid="91617b6b-1086-4c05-a1ce-4c64f8bc7dcd">Add a Custom Layer</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/88521cb3-0770-4f9c-9e47-74b6ea02b6eb.htm" title="Build an ActiveX Control" tocid="88521cb3-0770-4f9c-9e47-74b6ea02b6eb">Build an ActiveX Control</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/1cdf95ec-699c-4d92-bc98-df93503e5a4e.htm" title="Build a C++/MFC application" tocid="1cdf95ec-699c-4d92-bc98-df93503e5a4e">Build a C++/MFC application</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Add Different Shapes</h1></td></tr></table><span class="introStyle"></span> <div class="introduction"><p>
        This page explains the <span class="term">Different Shapes</span> use case which is provided with PTV xServer .NET.
        It shows how simple shapes can be displayed.
      </p><p>This page contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#CreatingShapeLayer">Creating and configuring ShapeLayer instances</a></li><li class="outlineSectionEntry"><a href="#ConfiguringShapeObject">Creating and configuring a shape object</a></li><li class="outlineSectionEntry"><a href="#UsingAnchorAndScale">Using anchor and scale</a></li><li class="outlineSectionEntry"><a href="#AddBasicUserInputHandling">Add basic user input handling</a></li><li class="outlineSectionEntry"><a href="#AnimateShapeObject">Animate a shape object</a></li><li class="outlineSectionEntry"><a href="#ListOfAvailableShapes">List of available shapes</a></li><li class="outlineSectionEntry"><a href="#TextualLabels">Textual labels</a></li><li class="outlineSectionEntry"><a href="#UseCases">Use case manual</a></li><li class="outlineSectionEntry"><a href="#seeAlsoSection">See Also</a></li></ul></div><div class="collapsibleAreaRegion" id="CreatingShapeLayer"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Creating and configuring ShapeLayer instances</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
        The <span class="term">Different Shapes</span> use case shows how to display different shape objects by means of the 
        <a href="T_Ptv_XServer_Controls_Map_Layers_Shapes_ShapeLayer.htm">ShapeLayer</a>.
        For more details about the concepts of this layer see the <a href="06a654f3-afbd-4f00-9c8e-36997e2a3951.htm">ShapeLayer topic</a>.
      </p><p>
        Two <a href="T_Ptv_XServer_Controls_Map_Layers_Shapes_ShapeLayer.htm">ShapeLayer</a> instances are used as a container for the shapes
        of this use case.
        The code sample shows how to create ShapeLayer instances and set the 
        <a href="P_Ptv_XServer_Controls_Map_Layers_Shapes_ShapeLayer_SpatialReferenceId.htm">SpatialReferenceId</a>, for
        one of these instances, i.e. Gauss-Kruger zone 3. This spatial reference system is
        used because like this the shapes displayed in the demo can easily be placed next to each other.
        The second layer remains in the default Mercator system.
      </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAEAIAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAEAIAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAEAIAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAEAIAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// create a shape layer</span>
shapeLayer = <span class="highlight-keyword">new</span> ShapeLayer(<span class="highlight-literal">"DifferentShapes"</span>)
{
    SpatialReferenceId = <span class="highlight-literal">"EPSG:31467"</span> <span class="highlight-comment">// set SR to Gauss-Kruger zone 3 (default is WGS84)</span>
};

shapeLayer2 = <span class="highlight-keyword">new</span> ShapeLayer(<span class="highlight-literal">"PieCharts"</span>);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAEAIAAA");</script><p>
        The next step is to add the layers to the map so that the elements of the layer are displayed on the map.
      </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACAIAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACAIAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EACAIAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACAIAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// add layers to map</span>
wpfMap.Layers.Add(shapeLayer);
wpfMap.Layers.InsertBefore(shapeLayer2, <span class="highlight-literal">"DifferentShapes"</span>);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACAIAAA");</script><p>
        The whole sample uses one central location around which the different shape objects are placed. This
        location is defined as follows and resides in the center of Hamburg (Germany).
      </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAIAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAIAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAAIAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAIAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// the location in Gauss-Kruger coordinates</span>
<span class="highlight-keyword">var</span> location = <span class="highlight-keyword">new</span> Point(<span class="highlight-number">3565913</span>, <span class="highlight-number">5935734</span>);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAIAAA");</script></div><div class="collapsibleAreaRegion" id="ConfiguringShapeObject"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Creating and configuring a shape object</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
        There is a number of predefined shapes in the Ptv.XServer.Controls.Map.Symbols namespace. All these
        shapes can be used to show objects on the map. This section discusses the configuration and usage of
        the shapes. 
      </p><p>
        The first step is to choose one of the shapes and to create an instance of it. The shape has to be a
        <a href="http://msdn2.microsoft.com/en-us/library/ms602714" target="_blank">FrameworkElement</a>. This means that
        every FrameworkElement can be used for rendering on the map! But for extended and better adapted behavior
        regarding the map, the <span class="nolink">Ptv.XServer.Controls.Map.Symbols.Shapes</span> are offered.

        The following code creates a whole set of different shapes:
      </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAIAHAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAIAHAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAIAHAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAIAHAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Create elements</span>
<span class="highlight-keyword">var</span> triangleDown = CreateElement(Symbols.TriangleDown, Colors.Black, Colors.Red) <span class="highlight-keyword">as</span> TriangleDown;
<span class="highlight-keyword">var</span> star = CreateElement(Symbols.Star, Colors.Yellow, Colors.Green) <span class="highlight-keyword">as</span> Star;
<span class="highlight-keyword">var</span> pentagon = CreateElement(Symbols.Pentagon, Colors.Red, Colors.Blue) <span class="highlight-keyword">as</span> Pentagon;
<span class="highlight-keyword">var</span> hexagon = CreateElement(Symbols.Hexagon, Colors.Orange, Colors.Navy) <span class="highlight-keyword">as</span> Hexagon;
<span class="highlight-keyword">var</span> diamond = CreateElement(Symbols.Diamond, Colors.DeepPink, Colors.Navy) <span class="highlight-keyword">as</span> Diamond;
<span class="highlight-keyword">var</span> pyramid = CreateElement(Symbols.Pyramid, Colors.Yellow, Colors.Black) <span class="highlight-keyword">as</span> Pyramid;
<span class="highlight-keyword">var</span> ball = CreateElement(Symbols.Ball, Colors.Yellow, Colors.Green) <span class="highlight-keyword">as</span> Ball;
ball.Width = ball.Height = <span class="highlight-number">100</span>; <span class="highlight-comment">// Varying the default size</span>
<span class="highlight-keyword">var</span> pin = CreateElement(Symbols.Pin, Colors.Green, Colors.Black) <span class="highlight-keyword">as</span> Pin;
<span class="highlight-keyword">var</span> cube = CreateElement(Symbols.Cube, Colors.Blue, Colors.Red) <span class="highlight-keyword">as</span> Cube;
cube.Width = cube.Height = <span class="highlight-number">15</span>; <span class="highlight-comment">// Varying the default size</span>
<span class="highlight-keyword">var</span> truck = CreateElement(Symbols.Truck, Colors.Red, Colors.Black) <span class="highlight-keyword">as</span> Truck;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAIAHAAA");</script><p>
        The demo helper method "CreateElement" and the enumeration type "Symbols" used in the object creation process
        are defined as follows:
      </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAGAHAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAGAHAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAGAHAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAGAHAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">/// &lt;summary&gt; Enumeration containing all possible symbol types for the elements. &lt;/summary&gt;</span>
<span class="highlight-keyword">private</span> <span class="highlight-keyword">enum</span> Symbols
{
    <span class="highlight-comment">/// &lt;summary&gt; Symbol type representing a triangle with an upward tip. &lt;/summary&gt;</span>
    TriangleUp,
    <span class="highlight-comment">/// &lt;summary&gt; Symbol type representing a triangle with an downward tip. &lt;/summary&gt;</span>
    TriangleDown,
    <span class="highlight-comment">/// &lt;summary&gt; Symbol type representing a star. &lt;/summary&gt;</span>
    Star,
    <span class="highlight-comment">/// &lt;summary&gt; Symbol type representing a pentagon. &lt;/summary&gt;</span>
    Pentagon,
    <span class="highlight-comment">/// &lt;summary&gt; Symbol type representing a hexagon. &lt;/summary&gt;</span>
    Hexagon,
    <span class="highlight-comment">/// &lt;summary&gt; Symbol type representing a diamond. &lt;/summary&gt;</span>
    Diamond,
    <span class="highlight-comment">/// &lt;summary&gt; Symbol type representing a pyramid. &lt;/summary&gt;</span>
    Pyramid,
    <span class="highlight-comment">/// &lt;summary&gt; Symbol type representing a ball. &lt;/summary&gt;</span>
    Ball,
    <span class="highlight-comment">/// &lt;summary&gt; Symbol type representing a pin. &lt;/summary&gt;</span>
    Pin,
    <span class="highlight-comment">/// &lt;summary&gt; Symbol type representing a cube. &lt;/summary&gt;</span>
    Cube,
    <span class="highlight-comment">/// &lt;summary&gt; Symbol type representing a truck. &lt;/summary&gt;</span>
    Truck
}

<span class="highlight-comment">/// &lt;summary&gt; Creates an element and sets the corresponding properties. &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;param name="symbol"&gt; Symbol type of the element. &lt;/param&gt;</span>
<span class="highlight-comment">/// &lt;param name="color"&gt; Color of the element. &lt;/param&gt;</span>
<span class="highlight-comment">/// &lt;param name="stroke"&gt; Stroke of the element. &lt;/param&gt;</span>
<span class="highlight-comment">/// &lt;returns&gt; The created element. &lt;/returns&gt;</span>
<span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> FrameworkElement CreateElement(Symbols symbol, Color color, Color stroke)
{
    FrameworkElement frameworkElement = <span class="highlight-keyword">null</span>;
    <span class="highlight-keyword">switch</span>(symbol)
    {
        <span class="highlight-keyword">case</span> Symbols.Ball:         frameworkElement = <span class="highlight-keyword">new</span> Ball { Color = color, Stroke = stroke, ToolTip = <span class="highlight-literal">"Ball"</span> }; <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">case</span> Symbols.Cube:         frameworkElement = <span class="highlight-keyword">new</span> Cube { Color = color, Stroke = stroke, ToolTip = <span class="highlight-literal">"Cube"</span> }; <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">case</span> Symbols.Diamond:      frameworkElement = <span class="highlight-keyword">new</span> Diamond { Color = color, Stroke = stroke, ToolTip = <span class="highlight-literal">"Diamond"</span> }; <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">case</span> Symbols.Hexagon:      frameworkElement = <span class="highlight-keyword">new</span> Hexagon { Color = color, Stroke = stroke, ToolTip = <span class="highlight-literal">"Hexagon"</span> }; <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">case</span> Symbols.Pentagon:     frameworkElement = <span class="highlight-keyword">new</span> Pentagon { Color = color, Stroke = stroke, ToolTip = <span class="highlight-literal">"Pentagon"</span> }; <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">case</span> Symbols.Pin:          frameworkElement = <span class="highlight-keyword">new</span> Pin { Color = color, ToolTip = <span class="highlight-literal">"Pin"</span> }; <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">case</span> Symbols.Pyramid:      frameworkElement = <span class="highlight-keyword">new</span> Pyramid { Color = color, Stroke = stroke, ToolTip = <span class="highlight-literal">"Pyramid"</span> }; <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">case</span> Symbols.Star:         frameworkElement = <span class="highlight-keyword">new</span> Star { Color = color, Stroke = stroke, ToolTip = <span class="highlight-literal">"Star"</span> }; <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">case</span> Symbols.TriangleDown: frameworkElement = <span class="highlight-keyword">new</span> TriangleDown { Color = color, Stroke = stroke, ToolTip = <span class="highlight-literal">"TriangleDown"</span> }; <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">case</span> Symbols.TriangleUp:   frameworkElement = <span class="highlight-keyword">new</span> TriangleUp { Color = color, Stroke = stroke, ToolTip = <span class="highlight-literal">"TriangleUp"</span> }; <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">case</span> Symbols.Truck:        frameworkElement = <span class="highlight-keyword">new</span> Truck { Color = color, ToolTip = <span class="highlight-literal">"Truck"</span> }; <span class="highlight-keyword">break</span>;
    }

    <span class="highlight-keyword">if</span> (frameworkElement == <span class="highlight-keyword">null</span>)
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">null</span>;

    frameworkElement.Height = <span class="highlight-number">32</span>;
    frameworkElement.Width = <span class="highlight-number">32</span>;

    <span class="highlight-keyword">return</span> frameworkElement;
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAGAHAAA");</script><p>
        To show all shapes next to each other on the screen, the shape positions are defined in such way referring to the
        central location coordinate. Using the z-index, it can be specified whether one shape is painted above or
        below another shape.
      </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAEAHAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAEAHAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAEAHAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAEAHAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// set position</span>
triangleDown.SetValue(ShapeCanvas.LocationProperty, <span class="highlight-keyword">new</span> Point(location.X + <span class="highlight-number">320</span>, location.Y));
Panel.SetZIndex(triangleDown, <span class="highlight-number">-1</span>);
star.SetValue(ShapeCanvas.LocationProperty, <span class="highlight-keyword">new</span> Point(location.X + <span class="highlight-number">640</span>, location.Y));
Panel.SetZIndex(star, <span class="highlight-number">-1</span>);
pentagon.SetValue(ShapeCanvas.LocationProperty, <span class="highlight-keyword">new</span> Point(location.X + <span class="highlight-number">960</span>, location.Y));
Panel.SetZIndex(pentagon, <span class="highlight-number">-1</span>);
hexagon.SetValue(ShapeCanvas.LocationProperty, <span class="highlight-keyword">new</span> Point(location.X, location.Y + <span class="highlight-number">320</span>));
Panel.SetZIndex(hexagon, <span class="highlight-number">-1</span>);
diamond.SetValue(ShapeCanvas.LocationProperty, <span class="highlight-keyword">new</span> Point(location.X + <span class="highlight-number">320</span>, location.Y + <span class="highlight-number">320</span>));
Panel.SetZIndex(diamond, <span class="highlight-number">-1</span>);
pyramid.SetValue(ShapeCanvas.LocationProperty, <span class="highlight-keyword">new</span> Point(location.X + <span class="highlight-number">640</span>, location.Y + <span class="highlight-number">320</span>));
Panel.SetZIndex(pyramid, <span class="highlight-number">-1</span>);
ball.SetValue(ShapeCanvas.LocationProperty, <span class="highlight-keyword">new</span> Point(location.X + <span class="highlight-number">960</span>, location.Y + <span class="highlight-number">320</span>));
Panel.SetZIndex(ball, <span class="highlight-number">-1</span>);
pin.SetValue(ShapeCanvas.LocationProperty, <span class="highlight-keyword">new</span> Point(location.X, location.Y + <span class="highlight-number">640</span>));
ShapeCanvas.SetAnchor(pin, LocationAnchor.RightBottom);
Panel.SetZIndex(pin, <span class="highlight-number">-1</span>);
cube.SetValue(ShapeCanvas.LocationProperty, <span class="highlight-keyword">new</span> Point(location.X + <span class="highlight-number">320</span>, location.Y + <span class="highlight-number">640</span>));
Panel.SetZIndex(cube, <span class="highlight-number">-1</span>);
truck.SetValue(ShapeCanvas.LocationProperty, <span class="highlight-keyword">new</span> Point(location.X + <span class="highlight-number">960</span>, location.Y + <span class="highlight-number">640</span>));
Panel.SetZIndex(truck, <span class="highlight-number">-1</span>);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAEAHAAA");</script><p>
        With the following code the shapes are added to the ShapeLayer. Like this, the shapes are made visible on the map. 
        Because SDK objects derived from 
        <a href="T_Ptv_XServer_Controls_Map_Layers_Shapes_MapPolylineBase.htm">MapPolylineBase</a> differs in their
        positioning, two different ways for specifying the object location are shown.
      </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACAHAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACAHAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EACAHAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACAHAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Because of a different positioning of labels for objects of type MapPolylineBase compared</span>
<span class="highlight-comment">// to other object types, two different implementations are available</span>
<span class="highlight-keyword">if</span> (frameworkElement <span class="highlight-keyword">is</span> MapPolylineBase)
{
    shapeLayer.Shapes.Add(frameworkElement);
    <span class="highlight-comment">// Create a label at the position specified in the Location property of the MapPolyline object.</span>
    <span class="highlight-keyword">var</span> border = CreateLabel(<span class="highlight-literal">"Hello"</span>);
    ShapeCanvas.SetLocation(border, ShapeCanvas.GetLocation(frameworkElement));
    shapeLayer.Shapes.Add(border);
}
<span class="highlight-keyword">else</span>
{
    <span class="highlight-comment">// Arrange symbol and text label in a stack panel</span>
    <span class="highlight-keyword">var</span> stackPanel = <span class="highlight-keyword">new</span> StackPanel();

    stackPanel.Children.Add(frameworkElement);
    stackPanel.Children.Add(CreateLabel(<span class="highlight-literal">"Hello"</span>));

    <span class="highlight-comment">// The following properties of the new object are transferred to the StackPanel for</span>
    <span class="highlight-comment">// correct behavior.</span>
    ShapeCanvas.SetLocation(stackPanel, ShapeCanvas.GetLocation(frameworkElement));
    ShapeCanvas.SetAnchor(stackPanel, ShapeCanvas.GetAnchor(frameworkElement));
    ShapeCanvas.SetScale(stackPanel, ShapeCanvas.GetScale(frameworkElement));
    ShapeCanvas.SetScaleFactor(stackPanel, ShapeCanvas.GetScaleFactor(frameworkElement));

    shapeLayer.Shapes.Add(stackPanel);

    <span class="highlight-comment">// Add the option animation</span>
    <span class="highlight-keyword">if</span> (animation == <span class="highlight-keyword">null</span>) <span class="highlight-keyword">return</span>;

    <span class="highlight-comment">// Set the animation to target the Center property of the stack panel object</span>
    Storyboard.SetTarget(animation, stackPanel);
    Storyboard.SetTargetProperty(animation, <span class="highlight-keyword">new</span> PropertyPath(ShapeCanvas.LocationProperty));

    <span class="highlight-comment">// Create a storyboard to apply the animation.</span>
    <span class="highlight-keyword">var</span> sb = <span class="highlight-keyword">new</span> Storyboard();
    sb.Children.Add(animation);
    sb.Begin();
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACAHAAA");</script><p>
        Finally, the map is centered at the region where the shapes have been placed.
      </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAHAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAHAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAAHAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAHAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// center map to location</span>
wpfMap.SetMapLocation(<span class="highlight-keyword">new</span> Point(location.X + <span class="highlight-number">1000</span>, location.Y + <span class="highlight-number">650</span>), <span class="highlight-number">14.7</span>, <span class="highlight-literal">"EPSG:31467"</span>);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAHAAA");</script></div><div class="collapsibleAreaRegion" id="UsingAnchorAndScale"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Using anchor and scale</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
        Sometimes it is necessary to show an object at a certain position related to the location, in a certain
        size or to give it a certain size behavior when zooming. For that, the methods and fields
        <a href="M_Ptv_XServer_Controls_Map_Layers_Shapes_ShapeCanvas_SetAnchor.htm">SetAnchor(FrameworkElement, LocationAnchor)</a>,
        <a href="F_Ptv_XServer_Controls_Map_Layers_Shapes_ShapeCanvas_ScaleProperty.htm">ScaleProperty</a> and
        <a href="M_Ptv_XServer_Controls_Map_Layers_Shapes_ShapeCanvas_SetScaleFactor.htm">SetScaleFactor(FrameworkElement, Double)</a>
        can be used.
              
        The following sections show the meaning of these settings.
      </p><p><strong>Setting the anchor of a shape</strong></p><p>
        For some shapes like the <a href="T_Ptv_XServer_Controls_Map_Symbols_Pin.htm">Pin</a>,
        it is recommended to set an anchor. The anchor describes the part of the shape which is attached to the
        given location. By default, this is the center of the shape. Like this, the shape is shown centered at
        the given location. The anchor of a shape can be changed by using the
        <a href="M_Ptv_XServer_Controls_Map_Layers_Shapes_ShapeCanvas_SetAnchor.htm">SetAnchor(FrameworkElement, LocationAnchor)</a>
        method. The pin shape points to its right bottom corner. So if this pin shape should really point to a predefined location, 
        the anchor of the shape has to be set to the right bottom.
      </p><p>
        A small sample shows the difference: The red ball marks the location where the pin points to. This
        location is set for the pin as well. If the anchor of the pin is set to the center (as done by
        default), the pin apex is not pointing on the location. If the pin anchor instead is set to
        <a href="T_Ptv_XServer_Controls_Map_Layers_Shapes_LocationAnchor.htm">RightBottom</a>,
        the pin apex points to the given location marked by the ball.
      </p><div class="tableSection"><table><tr><td><div class="mediaCenter"><img alt="Pin Center" src="../media/PinCenter.PNG" /><div class="caption">Pin with anchor at the center</div></div></td><td><div class="mediaCenter"><img alt="Pin Right Bottom" src="../media/PinRightBottom.PNG" /><div class="caption">Pin with anchor bottom right</div></div></td></tr></table></div><p>
        This code shows how to implement the centered and the bottom right anchor.
      </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EALAGAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EALAGAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EALAGAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EALAGAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> pinRightBottom = CreateElement(Symbols.Pin, Colors.Green, Colors.Black) <span class="highlight-keyword">as</span> Pin;
<span class="highlight-keyword">if</span> (pinRightBottom != <span class="highlight-keyword">null</span>)
{
    pinRightBottom.SetValue(ShapeCanvas.LocationProperty, <span class="highlight-keyword">new</span> Point(location.X - <span class="highlight-number">320</span>, location.Y));
    pinRightBottom.ToolTip = <span class="highlight-literal">"Pin with anchor right bottom"</span>;
    ShapeCanvas.SetAnchor(pinRightBottom, LocationAnchor.RightBottom);
    Panel.SetZIndex(pinRightBottom, <span class="highlight-number">-1</span>);
    AddToLayer(pinRightBottom);
}

<span class="highlight-keyword">var</span> ballRightBottom = CreateElement(Symbols.Ball, Colors.Red, Colors.Black) <span class="highlight-keyword">as</span> Ball;
<span class="highlight-keyword">if</span> (ballRightBottom != <span class="highlight-keyword">null</span>)
{
    ballRightBottom.Width = <span class="highlight-number">10</span>;
    ballRightBottom.Height = <span class="highlight-number">10</span>;
    ballRightBottom.ToolTip = <span class="highlight-literal">"Ball with same coordinates like pin"</span>;
    ballRightBottom.SetValue(ShapeCanvas.LocationProperty, <span class="highlight-keyword">new</span> Point(location.X - <span class="highlight-number">320</span>, location.Y));
    Panel.SetZIndex(ballRightBottom, <span class="highlight-number">-1</span>);
    AddToLayer(ballRightBottom);
}

<span class="highlight-keyword">var</span> pinCenter = CreateElement(Symbols.Pin, Colors.Green, Colors.Black) <span class="highlight-keyword">as</span> Pin;
<span class="highlight-keyword">if</span> (pinCenter != <span class="highlight-keyword">null</span>)
{
    pinCenter.SetValue(ShapeCanvas.LocationProperty, <span class="highlight-keyword">new</span> Point(location.X - <span class="highlight-number">320</span>, location.Y + <span class="highlight-number">150</span>));
    pinCenter.ToolTip = <span class="highlight-literal">"Pin with default anchor"</span>;
    Panel.SetZIndex(pinCenter, <span class="highlight-number">-1</span>);
    AddToLayer(pinCenter);
}

<span class="highlight-keyword">var</span> ballCenter = CreateElement(Symbols.Ball, Colors.Red, Colors.Black) <span class="highlight-keyword">as</span> Ball;
<span class="highlight-keyword">if</span> (ballCenter != <span class="highlight-keyword">null</span>)
{
    ballCenter.Width = <span class="highlight-number">10</span>;
    ballCenter.Height = <span class="highlight-number">10</span>;
    ballCenter.ToolTip = <span class="highlight-literal">"Ball with same coordinates like pin"</span>;
    ballCenter.SetValue(ShapeCanvas.LocationProperty, <span class="highlight-keyword">new</span> Point(location.X - <span class="highlight-number">320</span>, location.Y + <span class="highlight-number">150</span>));
    Panel.SetZIndex(ballCenter, <span class="highlight-number">-1</span>);
    AddToLayer(ballCenter);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EALAGAAA");</script><p><strong>Using the scale property</strong></p><p>
        By means of the scale property, an object can be shown bigger than initially defined. This can be used
        to show the border of the element thick or to show a text in a bigger size related to the object.
      </p><div class="mediaCenter"><img alt="Scale Property" src="../media/ScaleProperty.PNG" /><div class="caption">Left element with standard size, right element with ScaleProperty set to 3</div></div><p>
        To set the scale, use the following property: <a href="F_Ptv_XServer_Controls_Map_Layers_Shapes_ShapeCanvas_ScaleProperty.htm">ScaleProperty</a>.
        The code below shows the implementation of the two objects shown in the screenshot above.
      </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAGAGAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAGAGAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAGAGAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAGAGAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> starStandard = CreateElement(Symbols.Star, Colors.Green, Colors.Black) <span class="highlight-keyword">as</span> Star;
<span class="highlight-keyword">if</span> (starStandard != <span class="highlight-keyword">null</span>)
{
    starStandard.SetValue(ShapeCanvas.LocationProperty, <span class="highlight-keyword">new</span> Point(location.X - <span class="highlight-number">100</span>, location.Y + <span class="highlight-number">960</span>));
    starStandard.Width = starStandard.Height = <span class="highlight-number">40</span>;
    starStandard.ToolTip = <span class="highlight-literal">"Star with size 40 and scale 1 (standard display)"</span>;
    starStandard.SetValue(ShapeCanvas.ScaleProperty, <span class="highlight-number">1.0</span>);
    Panel.SetZIndex(starStandard, <span class="highlight-number">-1</span>);
    AddToLayer(starStandard);
}

<span class="highlight-keyword">var</span> starBig = CreateElement(Symbols.Star, Colors.Green, Colors.Black) <span class="highlight-keyword">as</span> Star;
<span class="highlight-keyword">if</span> (starBig != <span class="highlight-keyword">null</span>)
{
    starBig.SetValue(ShapeCanvas.LocationProperty, <span class="highlight-keyword">new</span> Point(location.X, location.Y + <span class="highlight-number">960</span>));
    starBig.Width = starBig.Height = <span class="highlight-number">40</span>;
    starBig.ToolTip = <span class="highlight-literal">"Star with size 40 and scale 3 (object bigger and border thicker)"</span>;
    starBig.SetValue(ShapeCanvas.ScaleProperty, <span class="highlight-number">3.0</span>);
    Panel.SetZIndex(starBig, <span class="highlight-number">-1</span>);
    AddToLayer(starBig);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAGAGAAA");</script><p><strong>Using the scale factor</strong></p><p>
        In the samples shown above, the objects always have a fix size. For some other use cases
        it might be desirable to influence the display size of the object when zooming into the map.
        Then the map might show the object bigger, zooming out of the map might show the object smaller.
      </p><p>
        To reach a changing behavior during zoom, the
        <a href="M_Ptv_XServer_Controls_Map_Layers_Shapes_ShapeCanvas_SetScaleFactor.htm">SetScaleFactor(FrameworkElement, Double)</a>
        method can be used.
      </p><ul><li><p>
            A scale factor of 0 means that the object is always shown in a fix pixel size. The object does not
            change its size. This is the default behavior.
          </p></li><li><p>
            A scale factor of 1 means that the object is grown as much as the map scale when zooming in. Like
            this, the object always has the same size in map coordinates. Zooming in, the object gets bigger and
            zooming out it gets smaller.
          </p></li><li><p>
            The scale factor can also be set to a value between 0 and 1. Like this, a nonlinear enlargement of the 
            object can be implemented, when zooming into the map. Scale and scale factor are used to
            calculate the factor by which the object size is multiplied. The formula for the transformation
            factor is the following: pow(mapScale, 1 - scaleFactor) * scale
          </p></li></ul><p>
        The following screenshots show three objects with a scale factor. The red object has scale factor 0 and
        is shown with a constant size in pixel units. The yellow object has scale factor 0.5 and thus is enlarged nonlinearly.
        And the green object has scale factor 1 and thus is shown with a fix size in coordinate units.
      </p><div class="tableSection"><table><tr><td><div class="mediaCenter"><img alt="Scale Factor Zoomed In" src="../media/ScaleFactorZoomedIn.PNG" /><div class="caption">State of the objects when the map was zoomed in</div></div></td><td><div class="mediaCenter"><img alt="Scale Factor Zoomed Out" src="../media/ScaleFactorZoomedOut.PNG" /><div class="caption">State of the objects when the map was zoomed out</div></div></td></tr></table></div></div><div class="collapsibleAreaRegion" id="AddBasicUserInputHandling"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Add basic user input handling</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
        Additionally to only showing a shape object on the map, some user interaction can be added to this shape.
        That means for example, a click on the shape or a mouse move over the shape can lead to an action like a
        change of color or something else.

        The <span class="term">Different Shapes</span> use case in the PTV xServer .NET Demo Center shows such a user interaction. In the
        following, the code is presented which implements this behavior.
              
        First, a <a href="T_Ptv_XServer_Controls_Map_Layers_Shapes_MapPolygon.htm">MapPolygon</a>
        object is created and added to the layer.
      </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAFAFAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAFAFAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAFAFAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAFAFAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> poly = <span class="highlight-keyword">new</span> MapPolygon
{
    Points = <span class="highlight-keyword">new</span> PointCollection(<span class="highlight-keyword">new</span>[]
    {
        (Point) (location - <span class="highlight-keyword">new</span> Point(<span class="highlight-number">-100</span>, <span class="highlight-number">-100</span>)), (Point) (location - <span class="highlight-keyword">new</span> Point(<span class="highlight-number">100</span>, <span class="highlight-number">-100</span>)),
        (Point) (location - <span class="highlight-keyword">new</span> Point(<span class="highlight-number">100</span>, <span class="highlight-number">100</span>)), (Point) (location - <span class="highlight-keyword">new</span> Point(<span class="highlight-number">-100</span>, <span class="highlight-number">100</span>))
    }),
    Fill = <span class="highlight-keyword">new</span> SolidColorBrush(Colors.Red),
    Opacity = .<span class="highlight-number">5</span>,
    MapStrokeThickness = <span class="highlight-number">5</span>,
    Stroke = <span class="highlight-keyword">new</span> SolidColorBrush(Colors.Black)
};
Panel.SetZIndex(poly, <span class="highlight-number">-1</span>);
AddToLayer(poly);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAFAFAAA");</script><p>
        To provide user interaction, some mouse event handlers are added which switch the color of the shape if 
        the shape is entered or left with the mouse.
      </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EADAFAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADAFAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EADAFAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADAFAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">poly.MouseEnter += (o, e) =&gt; poly.Fill = <span class="highlight-keyword">new</span> SolidColorBrush(Colors.Green);
poly.MouseLeave += (o, e) =&gt; poly.Fill = <span class="highlight-keyword">new</span> SolidColorBrush(Colors.Red);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADAFAAA");</script><p>
        As a result, the shape is painted green, if it is entered with the mouse and it is painted red if
        the mouse is not residing over the shape.
      </p><div class="mediaCenter"><img alt="Shape Mouse Enter" src="../media/ShapeMouseEnter.png" /><div class="caption">Mouse enter</div></div><div class="mediaCenter"><img alt="Shape Mouse Leave" src="../media/ShapeMouseLeave.png" /><div class="caption">Mouse leave</div></div></div><div class="collapsibleAreaRegion" id="AnimateShapeObject"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Animate a shape object</span></div><div id="ID5RBSection" class="collapsibleSection"><p>
        Not only user interactions can be implemented, also animations can be realized. Doing so, shapes can be moved around or 
        flowing size or color changes can be implemented. The <span class="term">Different shapes</span> use case shows a moving
        triangle. To move the shape, a <a href="http://msdn2.microsoft.com/en-us/library/ms618951" target="_blank">PointAnimation</a>
        and a <a href="http://msdn2.microsoft.com/en-us/library/ms634711" target="_blank">Storyboard</a> are used.
        The following code shows how this can be realized.
      </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAEAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAEAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// create a WPF element</span>
<span class="highlight-keyword">var</span> triangleUp = <span class="highlight-keyword">new</span> TriangleUp {
    Color = Colors.Blue, Stroke = Colors.Red, 
    HorizontalAlignment = HorizontalAlignment.Left,
    ToolTip = <span class="highlight-literal">"TriangleUp"</span>, Width = <span class="highlight-number">32</span>, Height = <span class="highlight-number">32</span> };

<span class="highlight-comment">// set geo location of the element</span>
triangleUp.SetValue(ShapeCanvas.LocationProperty, location);

<span class="highlight-comment">// add some click interaction</span>
triangleUp.MouseDoubleClick += (o, e) =&gt; MessageBox.Show(<span class="highlight-literal">"Hello!"</span>);

<span class="highlight-keyword">var</span> myPointAnimation = <span class="highlight-keyword">new</span> PointAnimation
{
    Duration = TimeSpan.FromSeconds(<span class="highlight-number">2</span>),
    AutoReverse = <span class="highlight-keyword">true</span>,
    RepeatBehavior = RepeatBehavior.Forever,
    From = location,
    To = <span class="highlight-keyword">new</span> Point(location.X + <span class="highlight-number">960</span>, location.Y + <span class="highlight-number">960</span>)
};

<span class="highlight-comment">// add to layer</span>
AddToLayer(triangleUp, myPointAnimation);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAEAAA");</script></div><div class="collapsibleAreaRegion" id="ListOfAvailableShapes"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />List of available shapes</span></div><div id="ID6RBSection" class="collapsibleSection"><p>
        As mentioned in the section above, there are several predefined shapes in the 
        <a href="N_Ptv_XServer_Controls_Map_Symbols.htm">Ptv.XServer.Controls.Map.Symbols</a>
        namespace. This list enumerates the available shapes:
      </p><div class="tableSection"><table><tr><td><div class="mediaCenter"><img alt="Shape Symbol Ball" src="../media/ShapeSymbolBall.png" /><div class="caption">Ball</div></div></td><td><div class="mediaCenter"><img alt="Shape Symbol Cube" src="../media/ShapeSymbolCube.png" /><div class="caption">Cube</div></div></td><td><div class="mediaCenter"><img alt="Shape Symbol Diamond" src="../media/ShapeSymbolDiamond.png" /><div class="caption">Diamond</div></div></td><td><div class="mediaCenter"><img alt="Shape Symbol Hexagon" src="../media/ShapeSymbolHexagon.png" /><div class="caption">Hexagon</div></div></td><td><div class="mediaCenter"><img alt="Shape Symbol Pentagon" src="../media/ShapeSymbolPentagon.png" /><div class="caption">Pentagon</div></div></td></tr><tr><td><div class="mediaCenter"><img alt="Shape Symbol Pin" src="../media/ShapeSymbolPin.png" /><div class="caption">Pin</div></div></td><td><div class="mediaCenter"><img alt="Shape Symbol Pyramid" src="../media/ShapeSymbolPyramid.png" /><div class="caption">Pyramid</div></div></td><td><div class="mediaCenter"><img alt="Shape Symbol Star" src="../media/ShapeSymbolStar.png" /><div class="caption">Star</div></div></td><td><div class="mediaCenter"><img alt="Shape Symbol Triangle Down" src="../media/ShapeSymbolTriangleDown.png" /><div class="caption">TriangleDown</div></div></td><td><div class="mediaCenter"><img alt="Shape Symbol Triangle Up" src="../media/ShapeSymbolTriangleUp.png" /><div class="caption">TriangleUp</div></div></td></tr></table></div><p>
        A special type of map shape in the
        <a href="N_Ptv_XServer_Controls_Map_Symbols.htm">Ptv.XServer.Controls.Map.Symbols</a> namespace is
        <a href="T_Ptv_XServer_Controls_Map_Symbols_Crosshair.htm">Crosshair</a>.
      </p><div class="mediaCenter"><img alt="Shape Symbol Crosshair" src="../media/ShapeSymbolCrosshair.png" /><div class="caption">Crosshair</div></div></div><div class="collapsibleAreaRegion" id="TextualLabels"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Textual labels</span></div><div id="ID7RBSection" class="collapsibleSection"><p>
        A text label can be placed below each symbol. A Border element is created and added to the shape collection.
      </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">return</span> <span class="highlight-keyword">new</span> Border
  {
      Visibility = Visibility.Collapsed, <span class="highlight-comment">// According the default value of UseLabel property, the labels are not visible.</span>
      Background = Brushes.White, 
      BorderBrush = Brushes.Black, 
      BorderThickness = <span class="highlight-keyword">new</span> Thickness(<span class="highlight-number">1</span>), 
      Margin = <span class="highlight-keyword">new</span> Thickness(<span class="highlight-number">5</span>), 
      HorizontalAlignment = HorizontalAlignment.Center,
      Child = <span class="highlight-keyword">new</span> TextBlock { Text = text, Background = Brushes.White, Foreground = Brushes.Black, Margin = <span class="highlight-keyword">new</span> Thickness(<span class="highlight-number">5</span>, <span class="highlight-number">0</span>, <span class="highlight-number">5</span>, <span class="highlight-number">2</span>) }
  };</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAACAAA");</script></div><div class="collapsibleAreaRegion" id="UseCases"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID8RB')" onkeypress="SectionExpandCollapse_CheckKey('ID8RB', event)" tabindex="0"><img id="ID8RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Use case manual</span></div><div id="ID8RBSection" class="collapsibleSection"><p>This section describes the <span class="term">Different shapes</span> use case in the Demo Center sample.</p><h4 class="subHeading" id="UseCase1">How to display the predefined shapes on the map</h4><div class="subsection"><p>
            The Different Shapes sample shows how to display, configure, animate and handle events for the predefined
            map shapes. When starting the demo application and activating the <span class="term">Different shapes</span>
            checkbox in the corresponding expander, the shapes are rendered in the map. Additionally, text labels 
            can be shown below each individual symbol.
          </p><div class="mediaCenter"><img alt="Different Shapes" src="../media/DifferentShapes.png" /><div class="caption">Different shapes</div></div></div></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID9RB')" onkeypress="SectionExpandCollapse_CheckKey('ID9RB', event)" tabindex="0"><img id="ID9RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID9RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Ptv_XServer_Controls_Map_Layers_Shapes_ShapeLayer.htm">ShapeLayer</a></div><div class="seeAlsoStyle"><a href="T_Ptv_XServer_Controls_Map_Layers_Shapes_MapPolygon.htm">MapPolygon</a></div><div class="seeAlsoStyle"><a href="T_Ptv_XServer_Controls_Map_Symbols_Ball.htm">Ball</a></div><div class="seeAlsoStyle"><a href="T_Ptv_XServer_Controls_Map_Symbols_Crosshair.htm">Crosshair</a></div><h4 class="subHeading">Other Resources</h4><div class="seeAlsoStyle"><a href="06a654f3-afbd-4f00-9c8e-36997e2a3951.htm">ShapeLayer topic</a></div></div></div></div><div id="pageFooter" class="pageFooter">Visit our website at <a href="http://www.ptvgroup.com">www.ptvgroup.com</a> or browse to <a href="http://xserver.ptvgroup.com">xserver.ptvgroup.com</a> for the latest information on our developer components.<p>Copyright (c) PTV Group, Karlsruhe, Germany.</p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:developer%40ptvgroup.com?Subject=PTV xServer .NET">developer@ptvgroup.com</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>